generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                        String             @id @default(cuid())
  name                      String?
  email                     String?            @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?            // 添加密码字段用于email+password登录
  githubId                  String?            @unique
  githubLogin               String?            @unique
  bio                       String?
  location                  String?
  website                   String?
  isVerified                Boolean            @default(false)
  role                      String             @default("USER")
  userType                  String?
  onboardingComplete        Boolean            @default(false)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  invitedById               String?
  inviteCode                String?
  followersCount            Int                @default(0)
  followingCount            Int                @default(0)
  unreadNotifications       Int                @default(0)
  accounts                  Account[]
  comments                  Comment[]          @relation("UserComments")
  developerProfile          DeveloperProfile?
  following                 Follow[]           @relation("UserFollowers")
  followers                 Follow[]           @relation("UserFollowing")
  generatedInviteCodes      InviteCode[]
  likes                     Like[]             @relation("UserLikes")
  messagesReceived          Message[]          @relation("MessageReceiver")
  messagesSent              Message[]          @relation("MessageSender")
  sentNotifications         Notification[]     @relation("SentNotifications")
  notifications             Notification[]     @relation("UserNotifications")
  posts                     Post[]             @relation("UserPosts")
  proposals                 Proposal[]         @relation("UserProposals")
  proposalStarVotes         ProposalStarVote[] @relation("UserProposalStarVotes")
  proposalVotes             ProposalVote[]     @relation("UserProposalVotes")
  remoteSessionsAsDeveloper RemoteSession[]    @relation("RemoteSessionDeveloper")
  remoteSessionsAsUser      RemoteSession[]    @relation("RemoteSessionUser")
  sessions                  Session[]
  shares                    Share[]            @relation("UserShares")
  starBalance               StarBalance?       @relation("UserStarBalance")
  adminStarTransactions     StarTransaction[]  @relation("AdminStarTransactions")
  starTransactions          StarTransaction[]  @relation("UserStarTransactions")
  starVotes                 StarVote[]         @relation("UserStarVotes")
  receivedStarVotes         StarVote[]         @relation("PostAuthorStarVotes")
  developerSubscriptions    Subscription[]     @relation("DeveloperSubscriptions")
  subscriptions             Subscription[]
  supports                  Support[]          @relation("UserSupports")
  invitedBy                 User?              @relation("UserInvites", fields: [invitedById], references: [id])
  invitedUsers              User[]             @relation("UserInvites")
  suggestionLikes           SuggestionLike[]
  suggestions               Suggestion[]
}

model InviteCode {
  id           String          @id @default(cuid())
  code         String          @unique
  createdById  String
  maxUses      Int             @default(1)
  usedCount    Int             @default(0)
  expiresAt    DateTime?
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  restrictions String?
  createdBy    User            @relation(fields: [createdById], references: [id])
  inviteUses   InviteCodeUse[]
}

model InviteCodeUse {
  id           String     @id @default(cuid())
  inviteCodeId String
  userId       String
  usedAt       DateTime   @default(now())
  ipAddress    String?
  userAgent    String?
  inviteCode   InviteCode @relation(fields: [inviteCodeId], references: [id])

  @@unique([inviteCodeId, userId])
}

model DeveloperProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  title         String
  description   String
  skills        String
  experience    String
  hourlyRate    Int
  isActive      Boolean  @default(true)
  rating        Float    @default(0)
  totalEarnings Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  developerId          String
  type                 String
  status               String
  stripeSubscriptionId String?  @unique
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  developer            User     @relation("DeveloperSubscriptions", fields: [developerId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, developerId])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  type       String   @default("TEXT")
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
}

model RemoteSession {
  id          String    @id @default(cuid())
  userId      String
  developerId String
  status      String
  sessionData String?
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  duration    Int?
  developer   User      @relation("RemoteSessionDeveloper", fields: [developerId], references: [id], onDelete: Cascade)
  user        User      @relation("RemoteSessionUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  content   String
  parentId  String?
  likes     Int       @default(0)
  likedBy   String[]  @default([])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model StarBalance {
  id             String    @id @default(cuid())
  userId         String    @unique
  totalStars     Int       @default(10)
  availableStars Int       @default(10)
  dailyEarned    Int       @default(0)
  maxDailyBasic  Int       @default(3)
  lastLoginDate  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation("UserStarBalance", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model StarTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  action      String
  description String
  relatedId   String?
  relatedType String?
  createdAt   DateTime @default(now())
  adminId     String?
  dailyKey    String?  @unique
  admin       User?    @relation("AdminStarTransactions", fields: [adminId], references: [id])
  user        User     @relation("UserStarTransactions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([action])
  @@index([createdAt])
  @@index([dailyKey])
}

model StarVote {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  postId     String
  amount     Int
  createdAt  DateTime @default(now())
  fromUser   User     @relation("UserStarVotes", fields: [fromUserId], references: [id], onDelete: Cascade)
  post       Post     @relation("PostStarVotes", fields: [postId], references: [id], onDelete: Cascade)
  toUser     User     @relation("PostAuthorStarVotes", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, postId])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([postId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String
  isRead    Boolean  @default(false)
  senderId  String?
  relatedId String?
  metadata  Json?
  createdAt DateTime @default(now())
  sender    User?    @relation("SentNotifications", fields: [senderId], references: [id])
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Share {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  platform  String
  shareUrl  String?
  createdAt DateTime @default(now())
  post      Post     @relation("PostShares", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserShares", fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Post {
  id           String     @id @default(cuid())
  authorId     String
  title        String
  content      String
  excerpt      String?
  tags         String     @default("")
  type         String     @default("TEXT")
  status       String     @default("PUBLISHED")
  isPublic     Boolean    @default(true)
  isPinned     Boolean    @default(false)
  viewCount    Int        @default(0)
  likeCount    Int        @default(0)
  commentCount Int        @default(0)
  shareCount   Int        @default(0)
  starCount    Int        @default(0)
  supportCount Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  publishedAt  DateTime?
  images       String[]   @default([])
  comments     Comment[]  @relation("PostComments")
  likes        Like[]     @relation("PostLikes")
  author       User       @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  shares       Share[]    @relation("PostShares")
  starVotes    StarVote[] @relation("PostStarVotes")
  supports     Support[]  @relation("PostSupports")

  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@index([type])
  @@index([isPinned])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  type      String   @default("LIKE")
  createdAt DateTime @default(now())
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Support {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  type      String
  amount    Int      @default(1)
  createdAt DateTime @default(now())
  post      Post     @relation("PostSupports", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserSupports", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([type])
}

model Suggestion {
  id        String           @id @default(cuid())
  authorId  String
  content   String           @db.VarChar(500)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  likes     SuggestionLike[]
  author    User             @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([createdAt])
  @@map("suggestions")
}

model SuggestionLike {
  id           String     @id @default(cuid())
  userId       String
  suggestionId String
  createdAt    DateTime   @default(now())
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, suggestionId])
  @@map("suggestion_likes")
}

model Proposal {
  id          String             @id @default(cuid())
  title       String
  description String
  category    String
  authorId    String
  status      String             @default("active")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  expiresAt   DateTime
  author      User               @relation("UserProposals", fields: [authorId], references: [id], onDelete: Cascade)
  starVotes   ProposalStarVote[] @relation("ProposalStarVotes")
  votes       ProposalVote[]     @relation("ProposalVotes")

  @@index([authorId])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([expiresAt])
}

model ProposalVote {
  id         String   @id @default(cuid())
  proposalId String
  userId     String
  voteType   String
  createdAt  DateTime @default(now())
  proposal   Proposal @relation("ProposalVotes", fields: [proposalId], references: [id], onDelete: Cascade)
  user       User     @relation("UserProposalVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([proposalId, userId])
  @@index([proposalId])
  @@index([userId])
  @@index([createdAt])
}

model ProposalStarVote {
  id         String   @id @default(cuid())
  proposalId String
  userId     String
  voteType   String
  starAmount Int
  createdAt  DateTime @default(now())
  proposal   Proposal @relation("ProposalStarVotes", fields: [proposalId], references: [id], onDelete: Cascade)
  user       User     @relation("UserProposalStarVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([userId])
  @@index([createdAt])
}
