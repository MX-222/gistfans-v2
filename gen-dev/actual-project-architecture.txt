===============================================================================
                    GistFans 实际项目架构 - 打印版本
===============================================================================

系统架构概览
===============================================================================

技术栈架构:
前端层:
- Next.js 15.3.5 (App Router)
- React 18.3.1 (函数组件 + Hooks)
- TypeScript 5+ (严格模式)
- Tailwind CSS 3.4.4 (样式框架)
- shadcn/ui (UI组件库)

后端层:
- Next.js API Routes (服务端API)
- Prisma 6.12.0 (ORM)
- NextAuth.js 4.24.11 (认证)
- Zod 3.25.74 (数据验证)

数据层:
- Supabase PostgreSQL (主数据库)
- Redis (缓存层)
- 连接池管理 (35个连接)

实时功能:
- Socket.io 4.8.1 (实时通信)
- WebRTC (视频通话)
- Server-Sent Events (通知推送)

核心模块架构
===============================================================================

1. 认证模块 (Authentication Module)

文件结构:
src/lib/auth.ts                    # NextAuth配置
src/app/api/auth/[...nextauth]/    # 认证API路由
middleware.ts                      # 路由保护中间件

认证流程:
1. GitHub OAuth授权
2. 用户信息获取和存储
3. 会话创建和管理
4. 权限验证和路由保护

数据模型:
model User {
  id            String   @id @default(cuid())
  email         String?  @unique
  name          String?
  image         String?
  githubId      String?  @unique
  role          String   @default("USER")
  isVerified    Boolean  @default(false)
  // ... 关系字段
}

model Account {
  // OAuth账户信息
}

model Session {
  // 用户会话信息
}

2. 数据库模块 (Database Module)

核心模型 (15个):
- User: 用户基础信息
- Post: 帖子内容
- Comment: 评论系统
- StarBalance: Star余额
- StarTransaction: Star交易记录
- StarVote: Star投票记录
- Notification: 通知系统
- Follow: 关注关系
- Share: 分享记录
- Like: 点赞记录
- Support: 支持记录
- Suggestion: 建议系统
- Proposal: 社区提案
- ProposalVote: 提案投票
- Message: 消息系统

连接池配置:
DATABASE_URL="postgresql://...?connection_limit=35&pool_timeout=30"

性能优化:
- 索引优化
- 查询优化 (只选择需要的字段)
- 连接池管理
- 事务处理

3. API模块 (API Module)

API路由结构:
src/app/api/
├── auth/                 # 认证相关API
├── posts/                # 帖子管理API
├── comments/             # 评论管理API
├── stars/                # Star系统API
├── admin/                # 管理员API
├── notifications/        # 通知API
└── test*/                # 测试API

API设计标准:
- RESTful设计原则
- 统一响应格式
- 错误处理标准
- 输入验证 (Zod)
- 权限验证

响应格式:
{
  "success": boolean,
  "data"?: T,
  "error"?: {
    "code": string,
    "message": string,
    "details"?: any
  },
  "meta"?: {
    "timestamp": string,
    "duration"?: number
  }
}

4. 前端组件模块 (Frontend Module)

组件架构:
src/components/
├── ui/                   # shadcn/ui基础组件
├── admin/                # 管理员组件
├── PostForm.tsx          # 帖子表单
├── StarDisplay.tsx       # Star显示
├── NotificationBell.tsx  # 通知铃铛
└── ...                   # 其他功能组件

状态管理:
src/contexts/
├── StarContext.tsx       # Star系统状态
├── LanguageContext.tsx   # 国际化状态
├── PostContext.tsx       # 帖子状态
└── CommentContext.tsx    # 评论状态

页面路由:
src/app/
├── page.tsx              # 首页
├── feed/                 # 动态页面
├── profile/              # 用户资料
├── admin*/               # 管理员页面
├── proposals/            # 提案页面
└── test*/                # 测试页面

数据流架构
===============================================================================

请求处理流程:
1. 客户端请求 → Next.js路由
2. 中间件验证 → 权限检查
3. API处理器 → 业务逻辑
4. 数据库操作 → Prisma ORM
5. 响应返回 → 统一格式

状态管理流程:
1. 用户操作 → 组件事件
2. Context更新 → 状态变更
3. 组件重渲染 → UI更新
4. 持久化存储 → 数据同步

实时数据流:
1. 用户操作 → Socket.io事件
2. 服务器广播 → 实时推送
3. 客户端接收 → 状态更新
4. UI实时更新 → 用户感知

Star系统数据流:
1. 用户投票 → Star扣除
2. 交易记录 → 数据库存储
3. 作者收益 → Star增加
4. 统计更新 → 缓存刷新

性能架构
===============================================================================

缓存策略:
1. 内存缓存 (LRU Cache)
   - Star统计缓存
   - 用户会话缓存
   - 热点数据缓存

2. Redis缓存
   - 用户状态缓存
   - 实时数据缓存
   - 会话存储

3. 数据库缓存
   - 查询结果缓存
   - 连接池复用
   - 预编译语句

连接池管理:
- 最大连接数: 35
- 超时时间: 30秒
- 连接复用策略
- 健康检查机制

图片处理:
- Next.js Image组件
- 自动优化和压缩
- 懒加载策略
- 响应式图片

代码分割:
- 动态导入 (dynamic import)
- 路由级别分割
- 组件级别分割
- 第三方库分割

安全架构
===============================================================================

认证安全:
- GitHub OAuth认证
- JWT令牌管理
- 会话安全存储
- 自动过期机制

权限控制:
- 基于角色的访问控制 (RBAC)
- 路由级别保护
- API级别验证
- 资源级别权限

输入验证:
- Zod schema验证
- 前端表单验证
- 后端数据验证
- SQL注入防护

XSS防护:
- 输出转义
- CSP策略
- 安全头设置
- 内容过滤

CSRF防护:
- CSRF令牌验证
- SameSite Cookie
- Origin验证
- 双重提交检查

监控和日志:
- 错误日志记录
- 性能监控
- 安全事件记录
- 审计日志

部署架构
===============================================================================

Vercel部署:
- 自动构建和部署
- 边缘网络分发
- 无服务器函数
- 环境变量管理

数据库部署:
- Supabase托管PostgreSQL
- 自动备份和恢复
- 连接池管理
- 性能监控

环境管理:
- 开发环境 (localhost:3000)
- 预发布环境 (staging)
- 生产环境 (production)
- 环境变量隔离

CI/CD流程:
1. 代码推送 → GitHub
2. 自动构建 → Vercel
3. 测试验证 → 自动化测试
4. 部署发布 → 生产环境

架构优势和限制
===============================================================================

架构优势:
1. 现代化技术栈
   - Next.js全栈框架
   - TypeScript类型安全
   - 组件化开发

2. 高性能设计
   - 服务端渲染 (SSR)
   - 静态生成 (SSG)
   - 边缘计算优化

3. 开发效率高
   - 热重载开发
   - 自动化部署
   - 丰富的生态系统

4. 安全性保障
   - 多层安全防护
   - 权限控制完善
   - 数据验证严格

架构限制:
1. 单体应用结构
   - 模块耦合度较高
   - 扩展性有限制
   - 部署粒度粗

2. 数据库依赖
   - 单一数据库实例
   - 扩展性瓶颈
   - 故障单点风险

3. 实时功能限制
   - Socket.io服务器状态
   - 水平扩展复杂
   - 连接管理挑战

改进建议:
1. 微服务架构演进
2. 数据库分片策略
3. 消息队列引入
4. 监控体系完善

测试架构
===============================================================================

测试体系:
1. 手动测试脚本 (50+个)
   - 功能测试脚本
   - 性能测试脚本
   - 集成测试脚本

2. 测试页面 (10+个)
   - 功能验证页面
   - 性能测试页面
   - 兼容性测试页面

3. API测试端点
   - 配置测试API
   - 连接测试API
   - 性能测试API

测试策略:
- 单元测试 (计划中)
- 集成测试 (部分实现)
- 端到端测试 (手动执行)
- 性能测试 (脚本自动化)

质量保证:
- 代码审查机制
- 自动化检查
- 持续集成
- 部署前验证

===============================================================================
架构文档版本: v1.0
基于代码版本: 当前main分支
最后更新: 2025-07-28
维护者: 开发团队
===============================================================================
